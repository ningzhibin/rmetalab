#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
# initComplete = htmlwidgets::JS(
#   "function(settings, json) {",
#   "$(this.api().table().header()).css({'font-size': '50%'});",
#   "}")
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", 12px, "'});")
"}")
)
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
# initComplete = htmlwidgets::JS(
#   "function(settings, json) {",
#   "$(this.api().table().header()).css({'font-size': '50%'});",
#   "}")
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", 12px, "'});"),
"}"
)
)
paste0("$(this.api().table().container()).css({'font-size': '", 12px, "'});")
paste0("$(this.api().table().container()).css({'font-size': '", "12px", "'});")
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
# initComplete = htmlwidgets::JS(
#   "function(settings, json) {",
#   "$(this.api().table().header()).css({'font-size': '50%'});",
#   "}")
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "12px", "'});"),
"}")
)
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "50%", "'});"),
"}")
)
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "60%", "'});"),
"}")
)
)
datatable(head(iris, 20), options = list(
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'font-size': '5px', 'background-color': '#c2d1f0', 'color': '#fff'});",
"}"))) %>%  formatStyle(columns = colnames(.$x$data), `font-size` = '12px')
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "60%", "'});"),
"}")
)
)
library(rmetalab)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 300,
scrollX = TRUE),
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "70%", "'});"),
"}")
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 300,
scrollX = TRUE),
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "70%", "'});"),
"}")
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "60%", "'});"),
"}")
)
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 300,
scrollX = TRUE),
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "70%", "'});"),
"}")
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 400,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "60%", "'});"),
"}")
)
)
datatable(
mtcars,
filter = 'top',
extensions = c('Scroller'),
options = list(
autoWidth = TRUE,
pageLength = 50,
dom = 'Brtip',
#buttons = c('colvis'),
scrollY = 300,
scrollX = TRUE,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "70%", "'});"),
"}")
)
)
library(rmetalab)
library(rmetalab)
library(rmetalab)
?tabBox
?tabPanel
?tabBox
?updateTabItems
?actionBttn
?radioButtons
?prettyRadioButtons
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty radio buttons"),
br(),
fluidRow(
column(
width = 4,
prettyRadioButtons(
inputId = "radio1",
label = "Click me!",
choices = c("Click me !", "Me !", "Or me !")
),
verbatimTextOutput(outputId = "res1"),
br(),
prettyRadioButtons(
inputId = "radio4",
label = "Click me!",
choices = c("Click me !", "Me !", "Or me !"),
outline = TRUE,
plain = TRUE,
icon = icon("thumbs-up")
),
verbatimTextOutput(outputId = "res4")
),
column(
width = 4,
prettyRadioButtons(
inputId = "radio2",
label = "Click me!",
thick = TRUE,
choices = c("Click me !", "Me !", "Or me !"),
animation = "pulse",
status = "info"
),
verbatimTextOutput(outputId = "res2"),
br(),
prettyRadioButtons(
inputId = "radio5",
label = "Click me!",
icon = icon("check"),
choices = c("Click me !", "Me !", "Or me !"),
animation = "tada",
status = "default"
),
verbatimTextOutput(outputId = "res5")
),
column(
width = 4,
prettyRadioButtons(
inputId = "radio3",
label = "Click me!",
choices = c("Click me !", "Me !", "Or me !"),
shape = "round",
status = "danger",
fill = TRUE,
inline = TRUE
),
verbatimTextOutput(outputId = "res3")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$radio1)
output$res2 <- renderPrint(input$radio2)
output$res3 <- renderPrint(input$radio3)
output$res4 <- renderPrint(input$radio4)
output$res5 <- renderPrint(input$radio5)
}
if (interactive())
shinyApp(ui, server)
?radioGroupButtons
if(interactive()) {
shiny::run.shinysky.example()
}
shiny::run.shinysky.example()
?tabPanel
library(rhandsontable)
?span
?downloadButton
?actionBttn
tempdir()
?includeHTML
?renderUI
?tempdir
tempdir() ->t
t
tempdir()
tempdir()
render
?render
library(rmarkdown)
?render
?downloadHandler
?file.copy
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
?radioButtons
library(rmetalab)
library(rmetalab)
library(rmetalab)
?head()
library(rmetalab)
?infoBox
?renderUI
library(rmetalab)
?swithc
?switch
curl https://api.ipgeolocation.io/ipgeo?ip=103.217.177.19
https://api.ipgeolocation.io/ipgeo?ip=103.217.177.19
?curl
library(curl)
install.packages("‘rgeolocate’")
library(rgeolocate)
？observeEvent
?observeEvent
if (interactive()) {
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
library(shinyapp)
library(shiny)
library(shinydashboard)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
qplot(1,1)
library(ggplot2)
qplot(1,1)
?tidy_peptide_table
library(rmetalab)
?tidy_peptide_table
tidy_peptide_table
?capture.output
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
library(rmetalab)
?scatterplot_ggrepel
library(rmetalab)
library(rmetalab)
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
?renderPlotly
library(rmetalab)
library(rmetalab)
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
plot_beta_diversity
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
detach("package:rmetalab", unload = TRUE)
library(rmetalab)
plot_beta_diversity
getwd()
R.home
R.home()
R.home()
library(ggplot2)
library(ggplot2)
Sys.timezone()
R.home()
library(rmetalab)
library(rmetalab)
install.packages("visNetwork")
install.packages("reshape2")
install.packages("ggfortify")
install.packages("gplots")
install.packages("heatmaply")
install.packages("heatmaply")
install.packages("UpSetR")
library(rmetalab)
